<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">G:\Program Files\maven3_repo\mysql\mysql-connector-java\5.1.32\mysql-connector-java-5.1.32.jar,G:\Program Files\apache-jmeter-3.3\lib\geronimo-jms_1.1_spec-1.1.1.jar,G:\Program Files\apache-jmeter-3.3\lib\fastjson-1.2.44.jar</stringProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="获取配置文件" enabled="true">
        <stringProp name="filename">..\resources\配置文件.txt</stringProp>
        <stringProp name="fileEncoding">utf-8</stringProp>
        <stringProp name="variableNames">serverUrl,sqlCheck,filePath</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP请求默认值" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${serverUrl}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="开单api" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1515650132000</longProp>
        <longProp name="ThreadGroup.end_time">1515650132000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">order.create</stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="登陆获取token" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="获取账号信息" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.khy.apitest.*;

String path=vars.get(&quot;filePath&quot;);
String filePath= path +&quot;dev_account.csv&quot;;

//获取杭州账号--发站
String hz_username=new GetFileData().readTxtData(filePath,33,4);//账号所在的行、列
String hz_password=new GetFileData().readTxtData(filePath,33,5);//密码所在的行、列
//获取余杭账号---到站
String yh_username=new GetFileData().readTxtData(filePath,34,4);
String yh_password=new GetFileData().readTxtData(filePath,34,5);
log.info(&quot;~~~~~~~~~~~~~路径地址为：&quot;+ filePath );
log.info(&quot;~~~~~~~~~~~~~获取到账号：&quot;+ hz_username );
log.info(&quot;~~~~~~~~~~~~~获取到账号密码：&quot;+ hz_password );

vars.put(&quot;hz_username&quot;,hz_username);
vars.put(&quot;hz_password&quot;,hz_password);
vars.put(&quot;yh_username&quot;,yh_username);
vars.put(&quot;yh_password&quot;,yh_password);

 </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登陆提取token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="service" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">employee.loginAuth</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">service</stringProp>
                </elementProp>
                <elementProp name="params" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;terminalType&quot;:1,&quot;username&quot;:&quot;${hz_username}&quot;,&quot;password&quot;:&quot;${hz_password}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">params</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ktms/service/call</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">//校验返回结果状态
String token = vars.get(&quot;token&quot;);
log.info(&quot;~~~~~~~~~~~~获取token~~~~~~~~~~：&quot;+token);
if(token.isEmpty())
  {
     Failure = true;  
     FailureMessage = &quot;获取token失败&quot;;  
  }
else{
	Failure = false;  
     FailureMessage = &quot;获取token成功&quot;;  
	}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="TestPlan.comments">获取登陆返回的token值</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">cookie</stringProp>
              <stringProp name="Header.value">tkey=${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="开单成功" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="获取运单数据" enabled="true">
            <stringProp name="filename">..\resources\开单数据_成功.csv</stringProp>
            <stringProp name="fileEncoding">GB2312</stringProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="开单成功(order.create)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">service=order.create&amp;params={&quot;order&quot;:{&quot;cargoNumber&quot;:&quot;&quot;,&quot;sourceStationId&quot;:&quot;${sourceStationId}&quot;,&quot;sourceStation&quot;:&quot;${sourceStation}&quot;,&quot;targetStationId&quot;:&quot;${targetStationId}&quot;,&quot;targetStation&quot;:&quot;${targetStation}&quot;,&quot;routeStationId&quot;:&quot;${routeStationId}&quot;,&quot;routeStation&quot;:&quot;${routeStation}&quot;,&quot;consignerId&quot;:&quot;${consignerId}&quot;,&quot;consigneeId&quot;:&quot;${consigneeId}&quot;,&quot;consignerName&quot;:&quot;${consignerName}&quot;,&quot;consigneeName&quot;:&quot;${consigneeName}&quot;,&quot;consignerPhone&quot;:&quot;${consignerPhone}&quot;,&quot;consigneePhone&quot;:&quot;${consigneePhone}&quot;,&quot;consignerAddress&quot;:&quot;${consignerAddress}&quot;,&quot;consigneeAddress&quot;:&quot;${consigneeAddress}&quot;,&quot;consignerType&quot;:&quot;${consignerType}&quot;,&quot;consigneeType&quot;:&quot;${consigneeType}&quot;,&quot;receiptNumber&quot;:&quot;${receiptNumber}&quot;,&quot;clientType&quot;:0,&quot;comments&quot;:&quot;&quot;,&quot;salesmanId&quot;:&quot;&quot;,&quot;salesmanName&quot;:&quot;&quot;,&quot;waitDelivery&quot;:0,&quot;ename&quot;:&quot;cxl-2部门&quot;,&quot;consignerIdNo&quot;:&quot;&quot;},&quot;cargos&quot;:[{&quot;name&quot;:&quot;${name}&quot;,&quot;quantity&quot;:&quot;${quantity}&quot;,&quot;weight&quot;:&quot;${weight}&quot;,&quot;volume&quot;:&quot;${volume}&quot;,&quot;unitPrice&quot;:&quot;&quot;,&quot;overpack&quot;:&quot;${overpack}&quot;,&quot;unitValue&quot;:1}],&quot;orderFee&quot;:{&quot;deliveryType&quot;:&quot;${deliveryType}&quot;,&quot;paymentType&quot;:&quot;${paymentType}&quot;,&quot;paymentCollect&quot;:&quot;${paymentCollect}&quot;,&quot;collectFee&quot;:0,&quot;freight&quot;:&quot;${freight}&quot;,&quot;pickupFee&quot;:&quot;&quot;,&quot;deliveryFee&quot;:&quot;&quot;,&quot;refund&quot;:&quot;&quot;,&quot;rebate&quot;:&quot;&quot;,&quot;insurePrice&quot;:0,&quot;insureFee&quot;:0,&quot;reserveTransitFee&quot;:&quot;&quot;,&quot;recordFee&quot;:1,&quot;receiptFee&quot;:0,&quot;storageFee&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/ktms/service/call</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="获取接口返回结果" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">status;number;message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.status;$.data;$.message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              <stringProp name="TestPlan.comments">获取接口返回的json结果中参数</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null;null;null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="走数据库校验" enabled="true">
            <stringProp name="IfController.condition">${__jexl3(&quot;${sqlCheck}&quot;==&quot;true&quot;)} </stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="走数据库校验" enabled="true">
              <stringProp name="TestPlan.comments">BeanShell Sampler</stringProp>
              <stringProp name="BeanShellSampler.query">import java.sql.*;  
import java.util.*;  
import java.lang.*;  
import org.apache.regexp.*;

String consignerPhone = &quot;${consignerPhone}&quot;; //开单数据收发货人电话
String consigneePhone  = &quot;${consigneePhone}&quot;; //开单数据收发货人电话
String deliveryType  = &quot;${deliveryType}&quot;; //开单数据支付类型
String freight  = &quot;${freight}&quot;; //开单数据运费
//校验返回结果状态
String resultStatus = vars.get(&quot;status&quot;);
String orderId = vars.get(&quot;number&quot;); 
log.info(&quot;~~~获取运单id：~~~~~&quot;+orderId);


if(resultStatus.equals(&quot;200&quot;) &amp;&amp; !orderId.isEmpty())
  {
     Failure = false;  
     FailureMessage = &quot;接口返回值正确&quot;;  
  }
else{
	Failure = true;  
     FailureMessage = &quot;接口返回值错误&quot;;  
	}


//获取是否检验数据库的配置项
String sqlCheck = vars.get(&quot;sqlCheck&quot;); 

log.info(&quot;~~~~~~~~~&quot; + &quot;是否校验数据库&quot; + sqlCheck+&quot;~~~~~~~&quot;);
//校验数据库写入是否成功
 String driver = &quot;com.mysql.jdbc.Driver&quot;;
 String url = &quot;jdbc:mysql://test.kuaihuoyun.com/kd_caesar_109?useUnicode=true&amp;characterEncoding=utf-8&quot;;
 String username = &quot;root&quot;;
 String password = &quot;pass321&quot;;
 String querySql = &quot;select * from t_order inner join t_order_fee on t_order.id=t_order_fee.order_id WHERE number = &quot; + &quot;&apos;&quot;+ orderId + &quot;&apos;&quot;;

 log.info(&quot;~~~~~~sql语句为：&quot; + querySql );
Connection conn = null;
Class.forName(driver); 
conn = (Connection) DriverManager.getConnection(url, username, password);

if (!conn.isClosed()) {
     Statement statement = conn.createStatement();
     ResultSet rs = statement.executeQuery(querySql);
     rs.last();
     int resultCount = rs.getRow();
     //调试
     log.info(&quot;查询条数：&quot;+ resultCount);
     String reConsignerPhone = rs.getString(&quot;consigner_phone&quot;);
     String reConsigneePhone = rs.getString(&quot;consignee_phone&quot;);
     String redeliveryType = rs.getString(&quot;delivery_type&quot;);
     String reFreight = rs.getString(&quot;freight&quot;);
     log.info(&quot;~~~~~~~~~查询出的结果是:&quot;+ reConsignerPhone + &quot;|&quot; + reConsigneePhone+ &quot;|&quot; + redeliveryType+ &quot;|&quot; + reFreight );
       if(resultCount == 1)  
         {  
           Failure = false;  
           FailureMessage = &quot;开单写入数据库&quot;;   
          }else{    
             Failure = true;  
             FailureMessage = &quot;开单未写入数据库&quot;;   
          } 
      //判断开单数据是否与写入数据库中数据一致
	if(reConsignerPhone.equals(consignerPhone) &amp;&amp; reConsigneePhone.equals(consigneePhone) &amp;&amp; redeliveryType.equals(deliveryType) &amp;&amp; reFreight.equals(freight)  ){
         	 Failure = false;  
           FailureMessage = &quot;开单数据正确&quot;; 
         	}else{
         	 Failure = true;  
           FailureMessage = &quot;开单数据错误&quot;; 
         	} 
        rs.close();
        statement.close();
        conn.close();
  }else{
      Failure = true;  
      FailureMessage = &quot;连接数据库失败或者数据库内没有历史数据&quot;;  
  }
 
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="走接口校验" enabled="true">
            <stringProp name="IfController.condition">${__jexl3(&quot;${sqlCheck}&quot;==&quot;false&quot;)} </stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="开单记录查询" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">service=order.query&amp;params={&quot;createdBegain&quot;:&quot;${__time(yyyy-MM-dd 00:00:00)}&quot;,&quot;createdEnd&quot;:&quot;${__time(yyyy-MM-dd 23:59:59)}&quot;,&quot;status&quot;:&quot;0&quot;,&quot;transitStatus&quot;:&quot;0&quot;,&quot;clientType&quot;:&quot;0&quot;,&quot;paymentType&quot;:&quot;0&quot;,&quot;keyword&quot;:&quot;${number}&quot;,&quot;page&quot;:1,&quot;size&quot;:20}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/ktms/service/call</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="获取接口返回结果" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">total;resultNumber;resConsignerPhone;resConsigneePhone;resDeliveryType;resFreight</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.total;$.data.items[0].number;$.data.items[0].consignerPhone;$.data.items[0].consigneePhone;$.data.items[0].deliveryType;$.data.items[0].freight</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                <stringProp name="TestPlan.comments">获取接口返回的json结果中参数</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">null;null;null;null;null;null</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="结果校验" enabled="true">
                <stringProp name="BeanShellAssertion.query">import java.util.*;  
import java.lang.*;  
import org.apache.regexp.*;

String createOrderID = vars.get(&quot;number&quot;);//开单时运单号
String consignerPhone = &quot;${consignerPhone}&quot;; //开单时收发货人电话
String consigneePhone  = &quot;${consigneePhone}&quot;; //开单时收发货人电话
String deliveryType  = &quot;${deliveryType}&quot;; //开单时支付类型
String freight  = &quot;${freight}&quot;; //开单时运费
String resultTotal = vars.get(&quot;total&quot;);
String resultOrderId = vars.get(&quot;resultNumber&quot;); //开单查询接口返回结果运单号
log.info(&quot;~~~获取运单id：&quot;+createOrderID+&quot;|查询总数：&quot; + resultTotal +&quot;|查询返回运单号：&quot;+resultOrderId );
String resConsignerPhone = vars.get(&quot;resConsignerPhone&quot;); //查询返回收发货人电话
String resConsigneePhone  = vars.get(&quot;resConsigneePhone&quot;); //查询返回收发货人电话
String resDeliveryType  = vars.get(&quot;resDeliveryType&quot;); //查询返回支付类型
String resFreight  = vars.get(&quot;resFreight&quot;); //查询返回运费
//判断按运单号只搜索到一条数据，且该数据的运单号与开单返回运单号一致
if(resultTotal.equals(&quot;1&quot;) &amp;&amp; resultOrderId.equals(createOrderID))
  {
     Failure = false;  
     FailureMessage = &quot;开单记录可查询到对应运单&quot;;  
  }
else{
	Failure = true;  
     FailureMessage = &quot;开单记录查不到对应运单&quot;;  
	}
 log.info(&quot;~~~~~~&quot;  +consignerPhone+&quot;|&quot; + resConsignerPhone+&quot;|&quot; + consigneePhone+&quot;|&quot; + resConsigneePhone+&quot;|&quot; + deliveryType+&quot;|&quot; + resDeliveryType+&quot;|&quot; + freight+&quot;|&quot; + resFreight);
if(consignerPhone.equals(resConsignerPhone) &amp;&amp; consigneePhone.equals(resConsigneePhone) &amp;&amp; 
   deliveryType.equals(resDeliveryType)){
     Failure = false;  
     FailureMessage = &quot;开单数据正确&quot;;  
	}
else{
	Failure = true;  
     FailureMessage = &quot;开单成功但数据不对&quot;;  
	}</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="开单失败" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="获取开单数据" enabled="true">
            <stringProp name="filename">..\resources\开单数据_失败.csv</stringProp>
            <stringProp name="fileEncoding">GB2312</stringProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="获取预期message" enabled="true">
            <stringProp name="TestPlan.comments">从csv文件中获取接口返回message的预期值</stringProp>
            <stringProp name="BeanShellSampler.query"> vars.put(&quot;expectedMessage&quot;,&quot;${expected_message}&quot;)</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="开单失败(order.create)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">service=order.create&amp;params={&quot;order&quot;:{&quot;cargoNumber&quot;:&quot;&quot;,&quot;sourceStationId&quot;:&quot;${sourceStationId}&quot;,&quot;sourceStation&quot;:&quot;${sourceStation}&quot;,&quot;targetStationId&quot;:&quot;${targetStationId}&quot;,&quot;targetStation&quot;:&quot;${targetStation}&quot;,&quot;routeStationId&quot;:&quot;${routeStationId}&quot;,&quot;routeStation&quot;:&quot;${routeStation}&quot;,&quot;consignerId&quot;:&quot;${consignerId}&quot;,&quot;consigneeId&quot;:&quot;${consigneeId}&quot;,&quot;consignerName&quot;:&quot;${consignerName}&quot;,&quot;consigneeName&quot;:&quot;${consigneeName}&quot;,&quot;consignerPhone&quot;:&quot;${consignerPhone}&quot;,&quot;consigneePhone&quot;:&quot;${consigneePhone}&quot;,&quot;consignerAddress&quot;:&quot;&quot;,&quot;consigneeAddress&quot;:&quot;&quot;,&quot;consignerType&quot;:&quot;${consignerType}&quot;,&quot;consigneeType&quot;:&quot;${consigneeType}&quot;,&quot;receiptNumber&quot;:&quot;&quot;,&quot;clientType&quot;:0,&quot;comments&quot;:&quot;&quot;,&quot;salesmanId&quot;:&quot;&quot;,&quot;salesmanName&quot;:&quot;&quot;,&quot;waitDelivery&quot;:0,&quot;ename&quot;:&quot;cxl-2部门&quot;,&quot;consignerIdNo&quot;:&quot;&quot;},&quot;cargos&quot;:[{&quot;name&quot;:&quot;${name}&quot;,&quot;quantity&quot;:&quot;${quantity}&quot;,&quot;weight&quot;:&quot;${weight}&quot;,&quot;volume&quot;:&quot;${volume}&quot;,&quot;unitPrice&quot;:&quot;&quot;,&quot;overpack&quot;:&quot;${overpack}&quot;,&quot;unitValue&quot;:1}],&quot;orderFee&quot;:{&quot;deliveryType&quot;:&quot;${deliveryType}&quot;,&quot;paymentType&quot;:&quot;${paymentType}&quot;,&quot;paymentCollect&quot;:&quot;${paymentCollect}&quot;,&quot;collectFee&quot;:0,&quot;freight&quot;:&quot;${freight}&quot;,&quot;pickupFee&quot;:&quot;&quot;,&quot;deliveryFee&quot;:&quot;&quot;,&quot;refund&quot;:&quot;&quot;,&quot;rebate&quot;:&quot;&quot;,&quot;insurePrice&quot;:0,&quot;insureFee&quot;:0,&quot;reserveTransitFee&quot;:&quot;&quot;,&quot;recordFee&quot;:1,&quot;receiptFee&quot;:0,&quot;storageFee&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/ktms/service/call</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">status;number;message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.status;$.data;$.message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              <stringProp name="TestPlan.comments">获取接口返回的json结果中参数</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null;null;null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="结果校验" enabled="true">
              <stringProp name="BeanShellAssertion.query">
//校验返回结果状态
String resultStatus = vars.get(&quot;status&quot;);
String orderId = vars.get(&quot;number&quot;);
//log.info(&quot;获取运单id：&quot;+orderId);
String resultMessage = vars.get(&quot;message&quot;);
//log.info(&quot;~~~接口返回信息~~~~~&quot; + resultMessage);
String expectedMessage =  vars.get(&quot;expectedMessage&quot;);
//log.info(&quot;~~~期望值~~~~~&quot; + expectedMessage);

//校验接口返回的状态值与是未生成运单id
if(resultStatus.equals(&quot;500&quot;) &amp;&amp; orderId.isEmpty())
  {
     Failure = false;  
     FailureMessage = &quot;接口返回值正确&quot;;  
  }
else{
	Failure = true;  
     FailureMessage = &quot;接口返回值错误&quot;;  
	}
//判断接口返回的message是否与预期的message相同
if(resultMessage.equals(expectedMessage))
{
	Failure = false;  
     FailureMessage = &quot;接口返回提示信息正确&quot;;  
	}
else{
     Failure = true;  
     FailureMessage = &quot;接口返回提示信息错误&quot;;
	}
	</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="不同账户类型开单" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519721787000</longProp>
        <longProp name="ThreadGroup.end_time">1519721787000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="开单" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">6</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="获取运单数据" enabled="true">
            <stringProp name="filename">..\resources\开单数据_不同账户类型开单.csv</stringProp>
            <stringProp name="fileEncoding">GB2312</stringProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="运费计算" enabled="true">
            <stringProp name="BeanShellSampler.query">/**保费随运费付款方式：【总运费 = 运费+接货费+送货费+制单费+保费+回单服务费+仓位费】//2017-5-4 调整加上仓位费
保费运费分离，保费现付：【总运费 = 运费+接货费+送货费+制单费+回单服务费+仓位费】//2017-5-4 调整加上仓位费

已更新可支持小数计算
*/
Double freight =Double.parseDouble(vars.get(&quot;freight&quot;));//运费
Double pickupFee =Double.parseDouble(vars.get(&quot;pickupFee&quot;));//接货费
Double deliveryFee =Double.parseDouble(vars.get(&quot;deliveryFee&quot;));//送货费
Double recordFee =Double.parseDouble(vars.get(&quot;recordFee&quot;));//制单费  
Double  insureFee =Double .parseDouble(vars.get(&quot;insureFee&quot;));//保费
Double receiptFee =Double.parseDouble(vars.get(&quot;receiptFee&quot;));//回单服务费
Double storageFee =Double.parseDouble(vars.get(&quot;storageFee&quot;));//仓位费
//计算总运费
Double totalFreight = freight + pickupFee + deliveryFee + recordFee + insureFee + receiptFee + storageFee ;
vars.put(&quot;totalFreight&quot;,totalFreight.toString());

log.info(&quot;~~~~~~~总运费是：&quot;  + totalFreight);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">cookie</stringProp>
                <stringProp name="Header.value">tkey=${token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登陆提取token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="service" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">employee.loginAuth</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">service</stringProp>
                </elementProp>
                <elementProp name="params" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;terminalType&quot;:1,&quot;username&quot;:&quot;${username}&quot;,&quot;password&quot;:&quot;47ec2dd791e31e2ef2076caf64ed9b3d&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">params</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ktms/service/call</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="TestPlan.comments">获取登陆返回的token值</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">//校验返回结果状态
String token = vars.get(&quot;token&quot;);
log.info(&quot;~~~~~~~~~~~~获取token~~~~~~~~~~：&quot;+token);
if(token.isEmpty())
  {
     Failure = true;  
     FailureMessage = &quot;获取token失败&quot;;  
  }
else{
	Failure = false;  
     FailureMessage = &quot;获取token成功&quot;;  
	}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="开单成功(order.create)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">service=order.create&amp;params={&quot;order&quot;:{&quot;cargoNumber&quot;:&quot;&quot;,&quot;sourceStationId&quot;:&quot;${sourceStationId}&quot;,&quot;sourceStation&quot;:&quot;${sourceStation}&quot;,&quot;targetStationId&quot;:&quot;${targetStationId}&quot;,&quot;targetStation&quot;:&quot;${targetStation}&quot;,&quot;routeStationId&quot;:&quot;${routeStationId}&quot;,&quot;routeStation&quot;:&quot;${routeStation}&quot;,&quot;consignerId&quot;:&quot;${consignerId}&quot;,&quot;consigneeId&quot;:&quot;${consigneeId}&quot;,&quot;consignerName&quot;:&quot;${consignerName}&quot;,&quot;consigneeName&quot;:&quot;${consigneeName}&quot;,&quot;consignerPhone&quot;:&quot;${consignerPhone}&quot;,&quot;consigneePhone&quot;:&quot;${consigneePhone}&quot;,&quot;consignerAddress&quot;:&quot;&quot;,&quot;consigneeAddress&quot;:&quot;&quot;,&quot;consignerType&quot;:&quot;${consignerType}&quot;,&quot;consigneeType&quot;:&quot;${consigneeType}&quot;,&quot;receiptNumber&quot;:&quot;${receiptNumber}&quot;,&quot;clientType&quot;:0,&quot;comments&quot;:&quot;&quot;,&quot;salesmanId&quot;:&quot;&quot;,&quot;salesmanName&quot;:&quot;&quot;,&quot;waitDelivery&quot;:0,&quot;ename&quot;:&quot;cxl-2部门&quot;,&quot;consignerIdNo&quot;:&quot;&quot;},&quot;cargos&quot;:[{&quot;name&quot;:&quot;${name}&quot;,&quot;quantity&quot;:&quot;${quantity}&quot;,&quot;weight&quot;:&quot;${weight}&quot;,&quot;volume&quot;:&quot;${volume}&quot;,&quot;unitPrice&quot;:&quot;&quot;,&quot;overpack&quot;:&quot;${overpack}&quot;,&quot;unitValue&quot;:1}],&quot;orderFee&quot;:{&quot;deliveryType&quot;:&quot;${deliveryType}&quot;,&quot;paymentType&quot;:&quot;${paymentType}&quot;,&quot;paymentCollect&quot;:&quot;${paymentCollect}&quot;,&quot;collectFee&quot;:0,&quot;freight&quot;:&quot;${freight}&quot;,&quot;pickupFee&quot;:&quot;&quot;,&quot;deliveryFee&quot;:&quot;&quot;,&quot;refund&quot;:&quot;&quot;,&quot;rebate&quot;:&quot;&quot;,&quot;insurePrice&quot;:0,&quot;insureFee&quot;:0,&quot;reserveTransitFee&quot;:&quot;&quot;,&quot;recordFee&quot;:1,&quot;receiptFee&quot;:0,&quot;storageFee&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/ktms/service/call</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="获取接口返回结果" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">status;number;message</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.status;$.data;$.message</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              <stringProp name="TestPlan.comments">获取接口返回的json结果中参数</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null;null;null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="结果校验" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.sql.*;  
import java.util.*;  
import java.lang.*;  
import org.apache.regexp.*;

//校验返回结果状态
String resultStatus = vars.get(&quot;status&quot;);
String orderId = vars.get(&quot;number&quot;); 
log.info(&quot;~~~获取运单id：~~~~~&quot;+orderId);

if(resultStatus.equals(&quot;200&quot;) &amp;&amp; !orderId.isEmpty())
  {
     Failure = false;  
     FailureMessage = &quot;接口返回值正确&quot;;  
  }
else{
	Failure = true;  
     FailureMessage = &quot;接口返回值错误&quot;;  
	}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="需缴款验证" enabled="true">
            <stringProp name="IfController.condition">${__jexl3(&quot;${expected}&quot; == &quot;1&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="走接口校验" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${sqlCheck}&quot;==&quot;false&quot;)} </stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="资金消费查询" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">service=financeApplyConsumption.query&amp;params={&quot;startTime&quot;:&quot;${__time(yyyy-MM-dd 00:00:00)}&quot;,&quot;endTime&quot;:&quot;${__time(yyyy-MM-dd 23:59:59)}&quot;,&quot;orderPaymentType&quot;:0,&quot;tradeCategory&quot;:&quot;&quot;,&quot;orgTradeType&quot;:0,&quot;orgName&quot;:&quot;${sourceStation}&quot;,&quot;consumptionOrg&quot;:${sourceStationId},&quot;page&quot;:1,&quot;size&quot;:20}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/ktms/service/call</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">credenceId;amt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.items[0].credence;$.data.items[0].amt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="资金消费有记录" enabled="true">
                <stringProp name="BeanShellAssertion.query">String orderNumber = &quot;${number}&quot;;
String credenceId = &quot;${credenceId}&quot;;
String totalFreight= &quot;${totalFreight}&quot;;
String Amt = &quot;${amt}&quot;
log.info(&quot;~~~~~~~~获取资金消费记录中的运单号~~~~~~~~~&quot; + credenceId  + amt + totalFreight);

if(credenceId.equals(orderNumber))
{
	Failure = false;  
     FailureMessage = &quot;进入资金消费记录&quot;; }
else{
	Failure = true;  
     FailureMessage = &quot;未进入资金消费记录&quot;; }
//添加扣除金额校验
if(Amt.equals(totalFreight))
{
	Failure = false;  
     FailureMessage = &quot;缴款金额正确&quot;; }
else{
	Failure = true;  
     FailureMessage = &quot;缴款金额错误&quot;; }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="走数据库校验" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${sqlCheck}&quot;==&quot;true&quot;)} </stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="数据库判断是否资金消费" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.sql.*;  
import java.util.*;  
import java.lang.*;  
import org.apache.regexp.*;
//获取开单的单号
String orderId = &quot;${number}&quot;;
String totalFreight =  &quot;${totalFreight}&quot;;
//获取是否检验数据库的配置项
String sqlCheck = vars.get(&quot;sqlCheck&quot;); 

log.info(&quot;~~~~~~~~~&quot; + &quot;是否校验数据库&quot; + sqlCheck+&quot;~~~~~~~&quot;);
//校验数据库写入是否成功
 String driver = &quot;com.mysql.jdbc.Driver&quot;;
 String url = &quot;jdbc:mysql://test.kuaihuoyun.com/kd_caesar_109?useUnicode=true&amp;characterEncoding=utf-8&quot;;
 String username = &quot;root&quot;;
 String password = &quot;pass321&quot;;
 String querySql = &quot;SELECT * from t_trade_receive WHERE credence =&quot; + &quot;&apos;&quot;+ orderId + &quot;&apos;&quot;;
 Connection conn = null;
 Class.forName(driver); 
 conn = (Connection) DriverManager.getConnection(url, username, password);

if (!conn.isClosed()) {
     Statement statement = conn.createStatement();
     ResultSet rs = statement.executeQuery(querySql);
     rs.last();
     int resultCount = rs.getRow();
     //获取金额
     String amt =rs.getString(&quot;amt&quot;);
     //获取金额类型，-为缴款，+为退款
     String sign = rs.getString(&quot;sign&quot;);
     log.info(&quot;查询条数：&quot;+ resultCount);
     log.info(&quot;~~~~~~~~~查询到的id字段值：&quot;+ id);
       if(resultCount == 1)  
         {  
           Failure = false;  
           FailureMessage = &quot;资金消费查询到对应记录&quot;;   
          }else{    
             Failure = true;  
             FailureMessage = &quot;资金消费未查询到对应记录&quot;;   
          }  
         	if(sign.equals(&quot;-1&quot;)){
         	 Failure = false;  
           FailureMessage = &quot;缴款成功&quot;; 
         	}else{
         	 Failure = true;  
           FailureMessage = &quot;缴款失败&quot;; 
         	}
         	if(amt.equals(totalFreight)){
         	 Failure = false;  
           FailureMessage = &quot;缴款金额正确&quot;; 
         	}else{
         	 Failure = true;  
           FailureMessage = &quot;缴款金额错误&quot;; 
         		}
        rs.close();
        statement.close();
        conn.close();
  }else{
      Failure = true;  
      FailureMessage = &quot;连接数据库失败或者数据库内没有历史数据&quot;;  
  }
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="无需缴款验证" enabled="true">
            <stringProp name="IfController.condition">${__jexl3(&quot;${expected}&quot; == &quot;0&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="走接口校验" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${sqlCheck}&quot;==&quot;false&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="资金消费查询" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">service=financeApplyConsumption.query&amp;params={&quot;startTime&quot;:&quot;${__time(yyyy-MM-dd 00:00:00)}&quot;,&quot;endTime&quot;:&quot;${__time(yyyy-MM-dd 23:59:59)}&quot;,&quot;orderPaymentType&quot;:0,&quot;tradeCategory&quot;:&quot;&quot;,&quot;orgTradeType&quot;:0,&quot;orgName&quot;:&quot;${sourceStation}&quot;,&quot;consumptionOrg&quot;:${sourceStationId},&quot;page&quot;:1,&quot;size&quot;:20}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/ktms/service/call</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">credenceId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.items[0].credence</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="判断运单不应进入资金消费记录" enabled="true">
                <stringProp name="BeanShellAssertion.query">String orderNumber = &quot;${number}&quot;;
String credenceId = &quot;${credenceId}&quot;;
log.info(&quot;~~~~~~~~获取资金消费记录中的运单号~~~~~~~~~&quot; + credenceId );

if(credenceId.equals(null) || !credenceId.equals(orderNumber) )
{
	Failure = false;  
     FailureMessage = &quot;未进入资金消费记录&quot;; }
else{
	Failure = true;  
     FailureMessage = &quot;进入资金消费记录&quot;; }
//添加扣除金额校验</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="走数据库校验" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${sqlCheck}&quot;==&quot;true&quot;)} </stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="数据库判断未扣款" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.sql.*;  
import java.util.*;  
import java.lang.*;  
import org.apache.regexp.*;
//获取开单的单号
String orderId = &quot;${number}&quot;;
//获取是否检验数据库的配置项
String sqlCheck = vars.get(&quot;sqlCheck&quot;); 

log.info(&quot;~~~~~~~~~&quot; + &quot;是否校验数据库&quot; + sqlCheck+&quot;~~~~~~~&quot;);
//校验数据库写入是否成功
 String driver = &quot;com.mysql.jdbc.Driver&quot;;
 String url = &quot;jdbc:mysql://test.kuaihuoyun.com/kd_caesar_109?useUnicode=true&amp;characterEncoding=utf-8&quot;;
 String username = &quot;root&quot;;
 String password = &quot;pass321&quot;;
 String querySql = &quot;SELECT * from t_trade_receive WHERE credence =&quot; + &quot;&apos;&quot;+ orderId + &quot;&apos;&quot;;
 Connection conn = null;
 Class.forName(driver); 
 conn = (Connection) DriverManager.getConnection(url, username, password);

if (!conn.isClosed()) {
     Statement statement = conn.createStatement();
     ResultSet rs = statement.executeQuery(querySql);
     rs.last();
     int resultCount = rs.getRow();
     log.info(&quot;查询条数：&quot;+ resultCount);
     log.info(&quot;~~~~~~~~~查询到的id字段值：&quot;+ id);
       if(resultCount == 0)  
         {  
           Failure = false;  
           FailureMessage = &quot;未有消费记录&quot;;   
          }else{    
             Failure = true;  
             FailureMessage = &quot;有消费记录&quot;;   
          }  
        rs.close();
        statement.close();
        conn.close();
  }else{
      Failure = true;  
      FailureMessage = &quot;连接数据库失败&quot;;  
  }
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="工作台" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
